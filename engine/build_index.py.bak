import gzip
import os
import json
from collections import defaultdict
import math

def load_data(input_dir):
    data = []
    for file_name in os.listdir(input_dir):
        if file_name.endswith('.json'):
            file_path = os.path.join(input_dir, file_name)
            with open(file_path, 'r', encoding='utf-8') as file:
                data.extend(json.load(file))
    return data

def create_inverted_index(data):
    """
    Create an zipped inverted index from the input data to save storage
    and compute TF-IDF values.
    """
    inverted_index = defaultdict(lambda: defaultdict(list))
    doc_freq = defaultdict(int)  # Document frequency for each token
    
    # Calculate term frequencies and document frequencies
    for document in data:
        file_name = document.get("file_name", "")
        content = document.get("content", {})
        tokens = content.get("token", [])
        seen_tokens = set()  # Track tokens seen in this document
        for position, token in enumerate(tokens):
            if token not in seen_tokens:
                doc_freq[token] += 1
                seen_tokens.add(token)
            if file_name not in inverted_index[token]:
                inverted_index[token][file_name] = [position]
            else:
                # Store position differences
                inverted_index[token][file_name].append(position - inverted_index[token][file_name][-1])

    # Calculate IDF for each token
    total_docs = len(data)
    idf = {token: math.log10(total_docs / df) for token, df in doc_freq.items()}

    # Convert inverted index to include TF-IDF values instead of positions
    tf_idf_index = {}
    for token, docs in inverted_index.items():
        tf_idf_index[token] = {}
        for doc, positions in docs.items():
            tf = len(positions)
            tf_idf = (1 + math.log10(tf)) * idf[token]
            tf_idf_index[token][doc] = tf_idf

    return tf_idf_index

def save_inverted_index(inverted_index, output_file):
    """
    Use gzip to save storage
    """
    with gzip.open(output_file, 'wt', encoding='utf-8') as file:
        json.dump(inverted_index, file, ensure_ascii=False)

if __name__ == "__main__":
    input_dir = 'processed_data/'         
    output_file = 'engine/inverted_index_with_tfidf.json'
    data = load_data(input_dir)
    inverted_index = create_inverted_index(data)
    save_inverted_index(inverted_index, output_file)
